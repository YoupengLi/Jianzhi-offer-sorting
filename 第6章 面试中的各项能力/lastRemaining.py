# -*- coding: utf-8 -*-
# @Time    : 2019/2/9 0009 上午 7:18
# @Author  : Youpeng Li
# @Site    : 
# @File    : lastRemaining.py
# @Software: PyCharm

'''
题目：每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了
一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。
每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,
继续0...m-1报数....这样下去....直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额
有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)

思路：约瑟夫环问题
     递推公式：f[i] = (f[i-1]+m)%i
     详细解释：http://blog.csdn.net/u012505432/article/details/51747181

Josephus问题的通解公式是:
f(n,m)=   | (f(n-1,m)+m) mod n, n>1
          | 0，                 n=1
其中f(n,m)表示n个人玩约瑟夫杀人游戏，每次报号m倍数的人被干掉的规则下最终剩下的那个人原本的标号。

假设有10个人，即n = 10，
0 1 2 3 4 5 6 7 8 9 选择m=3，
那么第一个人出列后的序列为：
0 1 3 4 5 6 7 8 9 ，即：
3 4 5 6 7 8 9 0 1 （i）
我们可以将该式转换为：
0 1 2 3 4 5 6 7 8 （ii）
那么则有 （（ii）+ 3 ）% 10 = （i）
也就是说，我们求出九个人中第9次的编号，利用上式进行转换就能得到第10个人第10次的结果。

进行普遍情况的分析：
n个人（编号0…n-1），从0开始报数，报到m-1的出列，剩下的n-1个人继续从0开始报数，求胜利者的编号。
第一个出列的人编号一定是 k = m-1 % n， 剩下的n-1个人组成一个新的约瑟夫环（以编号为 k+1 = m % n 的人开始）：

原始	k	k+1	k+2	…	n-2	n-1	0	1	2	…	k-2
新环	0	1	2	…						…	n-1

映射定义为p，则p(x) = (x-k-1) % n，表示如果映射前的数字是x，则映射后的数字是(x-k-1) % n。
该映射的逆映射为p^(-1)(x) = (x+k+1) % n。
由于映射后的序列与最初的序列具有相同的形式，所以映射之前的序列中最后剩下的数字
f'(n-1,m) = p^(-1)[f(n-1,m)] = [f(n-1,m) + k + 1] % n = [f(n-1,m) + m] % n
当n=1时，也就是序列中开始只有一个数字0，那么很显然剩下的数字即为0。
所以有：
f(n,m)=   | (f(n-1,m)+m) % n, n>1
          | 0，               n=1
该算法的时间复杂度为o(n)，空间复杂度为o(1)。
'''

class Solution:
    def lastRemaining(self, n: 'int', m: 'int') -> 'int':
        if n < 1 or m < 1:
            return -1
        temp = 0
        for i in range(1, n + 1):
            temp = (temp + m) % i
        return temp

if __name__ == "__main__":
    a = Solution()
    res = a.lastRemaining(5, 3)
    print(res)